
import matplotlib.pyplot as plt
import numpy as np
import CoolProp.CoolProp as cp
from tabulate import tabulate

percent_flow = 0.2
summer_op = 2e7
winter_op = 2.5e8

#state 1
m1 = 300 #kg/s
p1 = 1.9e7 #Pa
T1 = 858.15 #K
s1 = cp.PropsSI('S', 'P', p1, 'T', T1, 'Water') #J/(kg*K)
h1 = cp.PropsSI('H', 'P', p1, 'T', T1, 'Water') #J/kg
Q1 = cp.PropsSI('Q', 'P', p1, 'T', T1, 'Water')

#state 2
m2 = m1 #kg/s
p2 = 1e7 #Pa, assumption = p3
s2 = s1
h2s = cp.PropsSI('H', 'P', p2, 'S', s2, 'Water') #J/kg
h2 = -(0.92*(h1 - h2s)) + h1
T2 = cp.PropsSI('T', 'P', p2, 'H', h2, 'Water')
Q2 = cp.PropsSI('Q', 'P', p2, 'H', h2, 'Water')
s2 = cp.PropsSI('S', 'P', p2, 'H', h2, 'Water')

#state 3
m3 = m2 #kg/s
p3 = 1e7 #Pa
T3 = 858.15 #K
s3 = cp.PropsSI('S', 'P', p3, 'T', T3, 'Water') #J/(kg*K)
h3 = cp.PropsSI('H', 'P', p3, 'T', T3, 'Water') #J/kg
Q3 = cp.PropsSI('Q', 'P', p3, 'T', T3, 'Water')

#state 4
m4 = m3 #kg/s
p4 = 5e6 #assumption
s4 = s3
h4s = cp.PropsSI('H', 'P', p4, 'S', s4, 'Water') #J/kg
h4 = -(0.92*(h3 - h4s)) + h3
T4 = cp.PropsSI('T', 'P', p4, 'H', h4, 'Water')
Q4 = cp.PropsSI('Q', 'P', p4, 'H', h4, 'Water')
s4 = cp.PropsSI('S', 'P', p4, 'H', h4, 'Water')

#state 5
m5 = (1-percent_flow)*m4
p5 = 5e6 #Pa
T5 = T4 #assumption
s5 = cp.PropsSI('S', 'P', p5, 'T', T5, 'Water') #J/(kg*K)
h5 = cp.PropsSI('H', 'P', p5, 'T', T5, 'Water') #J/kg
Q5 = cp.PropsSI('Q', 'P', p5, 'T', T5, 'Water')

#state 6
m6 = m5
p6 = 1.5e6 #Pa, assumption from flow sep?
s6 = s5
h6s = cp.PropsSI('H', 'P', p6, 'S', s6, 'Water') #J/kg
h6 = -(0.92*(h5 - h6s)) + h5
Q6 = cp.PropsSI('Q', 'P', p6, 'H', h6, 'Water')
T6 = cp.PropsSI('T', 'P', p6, 'H', h6, 'Water') #K
s6 = cp.PropsSI('S', 'P', p6, 'H', h6, 'Water')

#state 7
p7 = 1.5e6
h7 = h6 #assumption, flow sep
s7 = cp.PropsSI('S', 'P', p7, 'H', h7, 'Water') #J/(kg*K)
Q7 = cp.PropsSI('Q', 'P', p7, 'H', h7, 'Water')
T7 = cp.PropsSI('T', 'P', p7, 'H', h7, 'Water') #K

#state 8
p8 = 8000 #Pa
s8 = s7
h8s = cp.PropsSI('H', 'P', p8, 'S', s8, 'Water') #J/kg
h8 = -(0.92*(h7 - h8s)) + h7
Q8 = cp.PropsSI('Q', 'P', p8, 'H', h8, 'Water')
T8 = cp.PropsSI('T', 'P', p8, 'H', h8, 'Water') #K
s8 = cp.PropsSI('S', 'P', p8, 'H', h8, 'Water')

#state 9
p9 = p8
x9 = 0
s9 = cp.PropsSI('S', 'P', p9, 'Q', x9, 'Water') #J/kg*K
h9 = cp.PropsSI('H', 'P', p9, 'Q', x9, 'Water') #J/kg
Q9 = cp.PropsSI('Q', 'P', p9, 'Q', x9, 'Water')
T9 = cp.PropsSI('T', 'P', p9, 'Q', x9, 'Water') #K

#state 10
p10 = 5e6 #assumption, based off of closed feedwater heater
s10 = s9
h10s = cp.PropsSI('H', 'P', p10, 'S', s10, 'Water') #J/kg
h10 = -((h9 - h10s)/0.85) + h9
Q10 = cp.PropsSI('Q', 'P', p10, 'H', h10, 'Water')
T10 = cp.PropsSI('T', 'P', p10, 'H', h10, 'Water') #K
s10 = cp.PropsSI('S', 'P', p10, 'H', h10, 'Water')

#state 11
m11 = (percent_flow)*m4
p11 = 5e6 #assumption
T11 = T4 #assumption
h11 = cp.PropsSI('H', 'P', p11, 'T', T11, 'Water') #J/kg
s11 = cp.PropsSI('S', 'P', p11, 'T', T11, 'Water') #J/kg*K
Q11 = cp.PropsSI('Q', 'P', p11, 'T', T11, 'Water')

#state 12
p12 = p7 #Pa
h12 = h6 #assumption
s12 = cp.PropsSI('S', 'P', p12, 'H', h12, 'Water') #J/(kg*K)
Q12 = cp.PropsSI('Q', 'P', p12, 'H', h12, 'Water')
T12 = cp.PropsSI('T', 'P', p12, 'H', h12, 'Water') #K

#state 13
p13 = p12
x13 = 0
h13 = cp.PropsSI('H', 'P', p13, 'Q', x13, 'Water') #J/kg
s13 = cp.PropsSI('S', 'P', p13, 'Q', x13, 'Water') #J/(kg*K)
Q13 = cp.PropsSI('Q', 'P', p13, 'Q', x13, 'Water')
T13 = cp.PropsSI('T', 'P', p13, 'Q', x13, 'Water') #K

m13 = ((winter_op/1000)/(h12/1000-h13/1000))
print(m13)
#finding flow rate at 7
m12 = m13
m7 = (m6 - m12)

#state 14
m14 = m13
p14 = p11 #based off of closed feedwater heater
s14 = s13
h14s = cp.PropsSI('H', 'P', p14, 'S', s14, 'Water') #J/kg
h14 = -((h13 - h14s)/0.85) + h13
Q14 = cp.PropsSI('Q', 'P', p14, 'S', s14, 'Water')
T14 = cp.PropsSI('T', 'P', p14, 'S', s14, 'Water') #K
s14 = cp.PropsSI('S', 'P', p14, 'S', s14, 'Water')

#state 15 [COGEN]
m15 = m1
p15 = p10
m8 = m7
m9 = m8
m10 = m9

h15 = (1/m15) * ((m11*h11) + (m10*h10) + (m14*h14)) #J/kg
s15 = cp.PropsSI('S', 'P', p15, 'H', h15, 'Water') #J/(kg*K)
Q15 = cp.PropsSI('Q', 'P', p15, 'H', h15, 'Water')
T15 = cp.PropsSI('T', 'P', p15, 'H', h15, 'Water') #K

#state 16
m16 = m1
p16 = p1
s16 = s15
h16s = cp.PropsSI('H', 'P', p16, 'S', s16, 'Water') #J/kg
h16 = -((h15 - h16s)/0.85) + h15
Q16 = cp.PropsSI('Q', 'P', p16, 'H', h16, 'Water')
T16 = cp.PropsSI('T', 'P', p16, 'H', h16, 'Water') #K
s16 = cp.PropsSI('S', 'P', p16, 'H', h16, 'Water')

#state check
# T = T1
# P = p1
# s = s1
# T_sat = cp.PropsSI('T', 'P', P, 'Q', 1, 'water')
# sat = np.isclose(T_sat, T)
# if sat: # if your state temp equals the sat. temp at your state pressure
#     s_liq = cp.PropsSI('S', 'T', T, 'Q', 0, 'water')
#     s_vap = cp.PropsSI('S', 'T', T, 'Q', 1, 'water')
#     if np.isclose(s, s_liq):
#         print("Saturated Liquid")
#     elif np.isclose(s,s_vap):
#         print('Saturated Vapor')
#     else:
#         print("2-phase Mixture")
# else:
#     if T_sat < T: # sat. temp corresponding to your state pressure is lower than your actual state temp
#         print("Superheated Vapor")
#     else:
#         print("Compressed Liquid")


# table [task 7]
dataT = [["1.00", p1/100000, T1, h1/1000, s1/1000, m1, "superheated vapor"],
         ["2.00", p2/100000, T2, h2/1000, s2/1000, m2, "superheated vapor"],
         ["3.00", p3/100000, T3, h3/1000, s3/1000, m3, "superheated vapor"],
         ["4.00", p4/100000, T4, h4/1000, s4/1000, m4, "superheated vapor"],
         ["5.00", p5/100000, T5, h5/1000, s5/1000, m5, "superheated vapor"],
         ["6.00", p6/100000, T6, h6/1000, s6/1000, m6, "superheated vapor"],
         ["7.00", p7/100000, T7, h7/1000, s7/1000, m7, "superheated vapor"],
         ["8.00", p8/100000, T8, h8/1000, s8/1000, m8, "2-phase"],
         ["9.00", p9/100000, T9, h9/1000, s9/1000, m9, "saturated liquid"],
         ["10.00", p10/100000, T10, h10/1000, s10/1000, m10, "compressed liquid"],
         ["11.00", p11/100000, T11, h11/1000, s11/1000, m11, "superheated vapor"],
         ["12.00", p12/100000, T12, h12/1000, s12/1000, m12, "superheated vapor"],
         ["13.00", p13/100000, T13, h13/1000, s13/1000, m13, "saturated liquid"],
         ["14.00", p14/100000, T14, h14/1000, s14/1000, m14, "compressed liquid"],
         ["15.00", p15/100000, T15, h15/1000, s15/1000, m15, "compressed liquid"],
         ["16.00", p16/100000, T16, h16/1000, s16/1000, m16, "compressed liquid"]]

headers = ["State", "p (bar)", "T (K)", "h (kJ/kg)", "s (kJ/kg*K)", "m (kg/s)", "Phase"]
table = tabulate(dataT, headers,floatfmt=".2f", tablefmt="fancy_grid")
print(table)

