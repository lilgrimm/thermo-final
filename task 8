
import matplotlib.pyplot as plt
import numpy as np
import CoolProp.CoolProp as cp
from tabulate import tabulate

percent_flow = 0.2
summer_op = 2e7
winter_op = 2.5e8

#state 1
m1 = 300 #kg/s
p1 = 1.9e7 #Pa
T1 = 858.15 #K
s1 = cp.PropsSI('S', 'P', p1, 'T', T1, 'Water') #J/(kg*K)
h1 = cp.PropsSI('H', 'P', p1, 'T', T1, 'Water') #J/kg
Q1 = cp.PropsSI('Q', 'P', p1, 'T', T1, 'Water')

#state 2
m2 = m1 #kg/s
p2 = 1e7 #Pa, assumption = p3
s2 = s1
h2s = cp.PropsSI('H', 'P', p2, 'S', s2, 'Water') #J/kg
h2 = -(0.92*(h1 - h2s)) + h1
T2 = cp.PropsSI('T', 'P', p2, 'H', h2, 'Water')
Q2 = cp.PropsSI('Q', 'P', p2, 'H', h2, 'Water')
s2 = cp.PropsSI('S', 'P', p2, 'H', h2, 'Water')

#state 3
m3 = m2 #kg/s
p3 = 1e7 #Pa
T3 = 858.15 #K
s3 = cp.PropsSI('S', 'P', p3, 'T', T3, 'Water') #J/(kg*K)
h3 = cp.PropsSI('H', 'P', p3, 'T', T3, 'Water') #J/kg
Q3 = cp.PropsSI('Q', 'P', p3, 'T', T3, 'Water')

#state 4
m4 = m3 #kg/s
p4 = 5e6 #assumption
s4 = s3
h4s = cp.PropsSI('H', 'P', p4, 'S', s4, 'Water') #J/kg
h4 = -(0.92*(h3 - h4s)) + h3
T4 = cp.PropsSI('T', 'P', p4, 'H', h4, 'Water')
Q4 = cp.PropsSI('Q', 'P', p4, 'H', h4, 'Water')
s4 = cp.PropsSI('S', 'P', p4, 'H', h4, 'Water')

#state 5
m5 = (1-percent_flow)*m4
p5 = 5e6 #Pa
T5 = T4 #assumption
s5 = cp.PropsSI('S', 'P', p5, 'T', T5, 'Water') #J/(kg*K)
h5 = cp.PropsSI('H', 'P', p5, 'T', T5, 'Water') #J/kg
Q5 = cp.PropsSI('Q', 'P', p5, 'T', T5, 'Water')

#state 6
m6 = m5
p6 = 1.5e6 #Pa, assumption from flow sep?
s6 = s5
h6s = cp.PropsSI('H', 'P', p6, 'S', s6, 'Water') #J/kg
h6 = -(0.92*(h5 - h6s)) + h5
Q6 = cp.PropsSI('Q', 'P', p6, 'H', h6, 'Water')
T6 = cp.PropsSI('T', 'P', p6, 'H', h6, 'Water') #K
s6 = cp.PropsSI('S', 'P', p6, 'H', h6, 'Water')

#state 7
p7 = 1.5e6
h7 = h6 #assumption, flow sep
s7 = cp.PropsSI('S', 'P', p7, 'H', h7, 'Water') #J/(kg*K)
Q7 = cp.PropsSI('Q', 'P', p7, 'H', h7, 'Water')
T7 = cp.PropsSI('T', 'P', p7, 'H', h7, 'Water') #K

#state 8
p8 = 8000 #Pa
s8 = s7
h8s = cp.PropsSI('H', 'P', p8, 'S', s8, 'Water') #J/kg
h8 = -(0.92*(h7 - h8s)) + h7
Q8 = cp.PropsSI('Q', 'P', p8, 'H', h8, 'Water')
T8 = cp.PropsSI('T', 'P', p8, 'H', h8, 'Water') #K
s8 = cp.PropsSI('S', 'P', p8, 'H', h8, 'Water')

#state 9
p9 = p8
x9 = 0
s9 = cp.PropsSI('S', 'P', p9, 'Q', x9, 'Water') #J/kg*K
h9 = cp.PropsSI('H', 'P', p9, 'Q', x9, 'Water') #J/kg
Q9 = cp.PropsSI('Q', 'P', p9, 'Q', x9, 'Water')
T9 = cp.PropsSI('T', 'P', p9, 'Q', x9, 'Water') #K

#state 10
p10 = 5e6 #assumption, based off of closed feedwater heater
s10 = s9
h10s = cp.PropsSI('H', 'P', p10, 'S', s10, 'Water') #J/kg
h10 = -((h9 - h10s)/0.85) + h9
Q10 = cp.PropsSI('Q', 'P', p10, 'H', h10, 'Water')
T10 = cp.PropsSI('T', 'P', p10, 'H', h10, 'Water') #K
s10 = cp.PropsSI('S', 'P', p10, 'H', h10, 'Water')

#state 11
m11 = (percent_flow)*m4
p11 = 5e6 #assumption
T11 = T4 #assumption
h11 = cp.PropsSI('H', 'P', p11, 'T', T11, 'Water') #J/kg
s11 = cp.PropsSI('S', 'P', p11, 'T', T11, 'Water') #J/kg*K
Q11 = cp.PropsSI('Q', 'P', p11, 'T', T11, 'Water')

#state 12
p12 = p7 #Pa
h12 = h6 #assumption
s12 = cp.PropsSI('S', 'P', p12, 'H', h12, 'Water') #J/(kg*K)
Q12 = cp.PropsSI('Q', 'P', p12, 'H', h12, 'Water')
T12 = cp.PropsSI('T', 'P', p12, 'H', h12, 'Water') #K

#state 13
p13 = p12
x13 = 0
h13 = cp.PropsSI('H', 'P', p13, 'Q', x13, 'Water') #J/kg
s13 = cp.PropsSI('S', 'P', p13, 'Q', x13, 'Water') #J/(kg*K)
Q13 = cp.PropsSI('Q', 'P', p13, 'Q', x13, 'Water')
T13 = cp.PropsSI('T', 'P', p13, 'Q', x13, 'Water') #K

#SUMMER OPPERATION!!
m13_s = ((summer_op/1000)/(h12/1000-h13/1000))

#finding flow rate at 7
m12_s = m13_s
m7_s = (m6 - m12_s)
#state 14
m14_s = m13_s
p14 = p11 #based off of closed feedwater heater
s14 = s13
h14s = cp.PropsSI('H', 'P', p14, 'S', s14, 'Water') #J/kg
h14 = -((h13 - h14s)/0.85) + h13
Q14 = cp.PropsSI('Q', 'P', p14, 'S', s14, 'Water')
T14 = cp.PropsSI('T', 'P', p14, 'S', s14, 'Water') #K
s14 = cp.PropsSI('S', 'P', p14, 'S', s14, 'Water')

#state 15 [COGEN]
m15 = m1
p15 = p10
m8_s = m7_s
m9_s = m8_s
m10_s = m9_s

h15_s = (1/m15) * ((m11*h11) + (m10_s*h10) + (m14_s*h14)) #J/kg
s15_s = cp.PropsSI('S', 'P', p15, 'H', h15_s, 'Water') #J/(kg*K)
Q15_s = cp.PropsSI('Q', 'P', p15, 'H', h15_s, 'Water')
T15_s = cp.PropsSI('T', 'P', p15, 'H', h15_s, 'Water') #K

#state 16
m16 = m1
p16 = p1
s16_s = s15_s
h16s_s = cp.PropsSI('H', 'P', p16, 'S', s16_s, 'Water') #J/kg
h16_s = -((h15_s - h16s_s)/0.85) + h15_s
Q16_s = cp.PropsSI('Q', 'P', p16, 'H', h16_s, 'Water')
T16_s = cp.PropsSI('T', 'P', p16, 'H', h16_s, 'Water') #K
s16_s = cp.PropsSI('S', 'P', p16, 'H', h16_s, 'Water')

#Work and Heat Transfer for SUMMER

W_out12_s = m1*(h1) - m2*(h2)
W_out34_s = m3*(h3) - m4*(h4)
W_out56_s = m5*(h5) - m6*(h6)
W_out78_s = m7_s*(h7) - m8_s*(h8)
W_out_net_s = (W_out12_s + W_out34_s + W_out56_s + W_out78_s)/1000000

W_in910_s = -(m9_s*(h9) - m10_s*(h10))
W_in1314_s = -(m13_s*(h13) - m14_s*(h14))
W_in1516_s = -(m15*(h15_s) - m16*(h16_s))
W_in_net_s = (W_in910_s + W_in1314_s + W_in1516_s)/1000000

W_net_s = W_out_net_s - W_in_net_s


Q_out1213_s = m12_s*(h12) - m13_s*(h13)
Q_out89_s = m8_s*(h8) - m9_s*(h9)
Q_out_net_s = (Q_out1213_s + Q_out89_s)/1000000

Q_in23_s = -(m2*(h2) - m3*(h3))
Q_in161_s = -(m16*(h16_s) - m1*(h1))
Q_in_net_s = (Q_in23_s + Q_in161_s)/1000000

Q_net_s = Q_in_net_s - Q_out_net_s

n_s = W_net_s / Q_in_net_s

n_cog_s = (W_out_net_s + (summer_op//1000000)) / Q_in_net_s

#WINTER OPPERATION!!
m13_w = ((winter_op/1000)/(h12/1000-h13/1000))

#finding flow rate at 7
m12_w = m13_w
m7_w = (m6 - m12_w)
#state 14
m14_w = m13_w

#state 15 [COGEN]
m8_w = m7_w
m9_w = m8_w
m10_w = m9_w

h15_w = (1/m15) * ((m11*h11) + (m10_w*h10) + (m14_w*h14)) #J/kg
s15_w = cp.PropsSI('S', 'P', p15, 'H', h15_w, 'Water') #J/(kg*K)
Q15_w = cp.PropsSI('Q', 'P', p15, 'H', h15_w, 'Water')
T15_w = cp.PropsSI('T', 'P', p15, 'H', h15_w, 'Water') #K

#state 16
s16_w = s15_w
h16s_w = cp.PropsSI('H', 'P', p16, 'S', s16_w, 'Water') #J/kg
h16_w = -((h15_w - h16s_w)/0.85) + h15_w
Q16_w = cp.PropsSI('Q', 'P', p16, 'H', h16_w, 'Water')
T16_w = cp.PropsSI('T', 'P', p16, 'H', h16_w, 'Water') #K
s16_w = cp.PropsSI('S', 'P', p16, 'H', h16_w, 'Water')

#Work and Heat Transfer for WINTER

W_out12_w = m1*(h1) - m2*(h2)
W_out34_w = m3*(h3) - m4*(h4)
W_out56_w = m5*(h5) - m6*(h6)
W_out78_w = m7_w*(h7) - m8_w*(h8)
W_out_net_w = (W_out12_w + W_out34_w + W_out56_w + W_out78_w)/1000000

W_in910_w = -(m9_w*(h9) - m10_w*(h10))
W_in1314_w = -(m13_w*(h13) - m14_w*(h14))
W_in1516_w = -(m15*(h15_w) - m16*(h16_w))
W_in_net_w = (W_in910_w + W_in1314_w + W_in1516_w)/1000000

W_net_w = W_out_net_w - W_in_net_w


Q_out1213_w = m12_w*(h12) - m13_w*(h13)
Q_out89_w = m8_w*(h8) - m9_w*(h9)
Q_out_net_w = (Q_out1213_w + Q_out89_w)/1000000

Q_in23_w = -(m2*(h2) - m3*(h3))
Q_in161_w = -(m16*(h16_w) - m1*(h1))
Q_in_net_w = (Q_in23_w + Q_in161_w)/1000000

Q_net_w = Q_in_net_w - Q_out_net_w

n_w = W_net_w / Q_in_net_w

n_cog_w = (W_out_net_w + (winter_op//1000000)) / Q_in_net_w

# table [task 8]
data_seasons = [["Summer", Q_in_net_s, W_net_s, summer_op/1000000, n_s, n_cog_s],
         ["Winter", Q_in_net_w, W_net_w, winter_op/1000000, n_w, n_cog_w]]

headers = ["Season", "Qin_net (MW)", "Wout_net (MW)", "Qout for Heating (MW)", "Power Cycle Efficiency", "Cogeneration Efficiency"]
table = tabulate(data_seasons, headers,floatfmt=".2f", tablefmt="fancy_grid")
print(table)

